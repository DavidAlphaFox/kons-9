;;; types.lisp -- type definitions for the Kons-9 API functions

;; Inspired by Serapeum library.
(defmacro -> (function args values)
  `(declaim (ftype (function ,args ,values) ,function)))

(deftype magnitude ()
  '(real 0 *))

;;; Point

(deftype point () '(simple-array single-float (3)))
(declaim (type point +origin+ +x-axis+ +y-axis+ +z-axis+))
(-> barycentric-point (point point point number number) point)
(-> copy-point-array (vector) sequence)
(-> copy-points (list) list)
(-> p! (number number number) point)
(-> p* (point (or point number)) point)
(-> p+ (point (or point number)) point)
(-> p- (point (or point number)) point)
(-> p-angle (point point) number)
(-> p-angle-cosine (point point) number)
(-> p-angle-sine (point point) number)
(-> p-average (&rest point) point)
(-> p-center (sequence) point)
(-> p-dist (point point) number)
(-> p-dist-squared (point point) number)
(-> p-from-to (point point) point)
(-> p-jitter (point number) point)
(-> p-midpoint (point point) point)
(-> p-rand (&optional number) point)
(-> p-rand1 (point &optional point) point)
(-> p-rand2 (point (or point number)) point)
(-> p-set! (point number number number) t)
(-> p-smooth-lerp (number point point) point)
(-> p-sphericize (point number &optional number point) point)
(-> p-vec (vector) point)
(-> p-z-alignment-angles (point) (values number number))
(-> p/ (point (or point number)) point)
(-> point->list (point) list)
(-> point-barycentric-coordinates (point point point point) point)
(-> point-curve-dist (point vector t) number)
(-> point-inside-triangle (point point point point) point)
(-> point-line-segment-dist (point point point) number)
(-> point-on-plane (point point point) point)
(-> point-on-triangle-plane (point point point point) point)
(-> points-bounds (vector) (values point point))
(-> quad-normal (point point point point) point)
(-> random-barycentric-point (point point point) point)
(-> triangle-area (point point point) number)
(-> triangle-normal (point point point) point)

;;; Colors

(deftype color () '(vector t 4))
(deftype level () '(single-float 0.0 1.0))

(-> c! (level level level &optional level) color)
(-> c-red (color) level)
(-> c-green (color) level)
(-> c-blue (color) level)
(-> c-alpha (color) level)
(-> c-set-rgb (color color) t)
(-> c-set-alpha (color level) t)
(-> c-lerp (level color color) color)
(-> c-rand () color)
(-> c-rand-with-alpha () color)
(-> c-rand2 (color color) color)
(-> c+ (color color) color)
(-> c-scale (color number) color)
(-> c-jitter (color color) color)
(-> c-rainbow (level) color)

;;; Point cloud

(-> make-arc-points (number number number number) vector)
(-> make-circle-points (number number) vector)
(-> make-grid-points (number number number number number) vector)
(-> make-line-points (point point number) vector)
(-> make-point-cloud (vector) point-cloud)
(-> make-random-points (number number number) vector)
(-> make-rectangle-points (number number &optional number) vector)
(-> make-sine-curve-points (number number number number number) vector)
(-> make-spiral-points (number number number number number) vector)

;;; Polyhedron

(-> make-box (magnitude magnitude magnitude &key (name t) (mesh-type symbol)) polyhedron)
(-> make-circle-polyhedron (magnitude integer &key (name t) (mesh-type symbol)) polyhedron)
(-> make-cube (magnitude &key (name t) (mesh-type symbol)) polyhedron)
(-> make-cube-sphere (magnitude integer &key (name t) (mesh-type symbol)) polyhedron)
(-> make-cut-cube (magnitude &key (name t) (mesh-type symbol)) polyhedron)
(-> make-dodecahedron (magnitude &key (name t) (mesh-type symbol)) polyhedron)
(-> make-icosahedron (magnitude &key (name t) (mesh-type symbol)) polyhedron)
(-> make-octahedron (magnitude &key (name t) (mesh-type symbol)) polyhedron)
(-> make-polyhedron (vector vector &key (name t) (mesh-type symbol)) polyhedron)
(-> make-rectangle-polyhedron (magnitude magnitude &key (name t) (mesh-type symbol)) polyhedron)
(-> make-square-polyhedron (magnitude &key (name t) (mesh-type symbol)) polyhedron)
(-> make-tetrahedron (magnitude &key (name t) (mesh-type symbol)) polyhedron)

;;; Matrix
(deftype matrix ()
  "3D affine transformation matrix."
  '(array number (4 4)))

(-> make-axis-rotation-matrix  (number point &optional point) matrix)
(-> make-id-matrix             () matrix)
(-> make-look-at-from-matrix   (point point &optional point) matrix)
(-> make-look-dir-from-matrix  (point point &optional point) matrix)
(-> make-matrix                () matrix)
(-> make-matrix-with           (t) matrix)
(-> make-rotation-matrix       (point symbol) matrix)
(-> make-scale-matrix          (point &optional point) matrix)
(-> make-shear-matrix          (point) matrix)
(-> make-translation-matrix    (point) matrix)
(-> make-x-rotation-matrix     (number) matrix)
(-> make-y-rotation-matrix     (number) matrix)
(-> make-z-alignment-matrix    (point) matrix)
(-> make-z-rotation-matrix     (number) matrix)
(-> matrix->list               (matrix) list)
(-> matrix->vector             (matrix) vector)
(-> matrix-copy                (matrix) matrix)
(-> matrix-multiply            (matrix matrix) matrix)
(-> matrix-multiply-n          (&rest matrix) matrix)
(-> transform-point            (point matrix) point)
(-> transform-point!           (point matrix) point)
(-> transform-point-array      (vector matrix) t)
(-> transform-points           (sequence matrix) vector)


;;; Command tables

(-> active-command-table () (or null command-table))
(-> make-active-command-table (command-table) t)
